// Generated by CoffeeScript 1.6.3
var Q, SassCompiler, exec, progeny, spawn, sysPath, _ref;

_ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

sysPath = require('path');

progeny = require('progeny');

Q = require('q');

module.exports = SassCompiler = (function() {
  SassCompiler.prototype.brunchPlugin = true;

  SassCompiler.prototype.type = 'stylesheet';

  SassCompiler.prototype.extension = 'scss';

  SassCompiler.prototype.pattern = /\.s[ac]ss$/;

  SassCompiler.prototype.compass = Q.defer();

  SassCompiler.prototype._bin = process.platform === 'win32' ? 'sass.bat' : 'sass';

  SassCompiler.prototype._compass_bin = 'compass';

  function SassCompiler(brunchConfig) {
    var env, k, prefix, v, _ref1, _ref2, _ref3,
      _this = this;
    this.brunchConfig = brunchConfig;
    this.conf = (_ref1 = this.brunchConfig.plugins) != null ? _ref1.sass : void 0;
    this.gem_home = (_ref2 = this.conf) != null ? _ref2.gem_home : void 0;
    this.mod_env = {};
    if (this.gem_home) {
      env = ((function() {
        var _ref3, _results;
        _ref3 = process.env;
        _results = [];
        for (k in _ref3) {
          v = _ref3[k];
          _results.push([k, v]);
        }
        return _results;
      })()).reduce(function(a, _arg) {
        var k, v;
        if (a == null) {
          a = {};
        }
        k = _arg[0], v = _arg[1];
        a[k] = v;
        return a;
      });
      env['GEM_HOME'] = this.gem_home;
      this.mod_env = {
        env: env
      };
      this._bin = "" + this.gem_home + "/bin/sass";
      this._compass_bin = "" + this.gem_home + "/bin/compass";
    }
    this.bundler = (_ref3 = this.conf) != null ? _ref3.useBundler : void 0;
    prefix = this.bundler ? 'bundle exec ' : '';
    exec("" + prefix + this._bin + " --version", this.mod_env, function(error) {
      if (error) {
        console.error("You need to have Sass on your system");
        return console.error("Execute `gem install sass`");
      }
    });
    exec("" + prefix + this._compass_bin + " --version", this.mod_env, function(error) {
      return _this.compass.resolve(!error);
    });
    this.getDependencies = progeny({
      rootPath: this.brunchConfig.paths.root
    });
  }

  SassCompiler.prototype.compile = function(data, path, callback) {
    var _this = this;
    return Q.when(this.compass, function(compassExists) {
      return _this.deferredCompile(data, path, callback, compassExists);
    });
  };

  SassCompiler.prototype.deferredCompile = function(data, path, callback, compassExists) {
    var cmd, delay, error, execute, hasComments, result, _ref1, _ref2, _ref3, _ref4,
      _this = this;
    result = '';
    error = null;
    cmd = ['sass', '--stdin', '--load-path', this.brunchConfig.paths.root, '--load-path', sysPath.dirname(path), '--no-cache'];
    if (this.bundler) {
      cmd.unshift('bundle', 'exec');
    }
    if (((_ref1 = (_ref2 = this.conf) != null ? _ref2.debug : void 0) === 'comments' || _ref1 === 'debug') && !this.brunchConfig.optimize) {
      hasComments = ((_ref3 = this.conf) != null ? _ref3.debug : void 0) === 'comments';
      cmd.push(hasComments ? '--line-comments' : '--debug-info');
    }
    if (/\.scss$/.test(path)) {
      cmd.push('--scss');
    }
    if (compassExists) {
      cmd.push('--compass');
    }
    if (((_ref4 = this.conf) != null ? _ref4.options : void 0) != null) {
      cmd.push.apply(cmd, this.conf.options);
    }
    execute = function() {
      var onExit, sass;
      sass = spawn(cmd[0], cmd.slice(1), _this.mod_env);
      sass.stdout.on('data', function(buffer) {
        return result += buffer.toString();
      });
      sass.stderr.on('data', function(buffer) {
        if (error == null) {
          error = '';
        }
        return error += buffer.toString();
      });
      onExit = function(code) {
        return callback(error, result);
      };
      if (process.version.slice(0, 4) === 'v0.6') {
        sass.on('exit', onExit);
      } else {
        sass.on('close', onExit);
      }
      if (sass.stdin.write(data)) {
        return sass.stdin.end();
      } else {
        return sass.stdin.on('drain', function() {
          return sass.stdin.end();
        });
      }
    };
    delay = function() {
      if (compassExists != null) {
        return execute();
      } else {
        return setTimeout(delay, 100);
      }
    };
    return delay();
  };

  return SassCompiler;

})();
