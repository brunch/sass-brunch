// Generated by CoffeeScript 1.3.3
(function() {
  var SassCompiler, exec, spawn, sysPath, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  sysPath = require('path');

  module.exports = SassCompiler = (function() {

    SassCompiler.prototype.brunchPlugin = true;

    SassCompiler.prototype.type = 'stylesheet';

    SassCompiler.prototype.extension = 'scss';

    SassCompiler.prototype.pattern = /\.s[ac]ss$/;

    SassCompiler.prototype._dependencyRegExp = /^ *@import ['"](.*)['"]/;

    SassCompiler.prototype._bin = process.platform === 'win32' ? 'sass.bat' : 'sass';

    function SassCompiler(config) {
      var _this = this;
      this.config = config;
      this.getDependencies = __bind(this.getDependencies, this);

      exec("" + this._bin + " --version", function(error, stdout, stderr) {
        if (error) {
          console.error("You need to have Sass on your system");
          return console.error("Execute `gem install sass`");
        }
      });
      exec('compass --version', function(error, stdout, stderr) {
        return _this.compass = !error;
      });
    }

    SassCompiler.prototype.compile = function(data, path, callback) {
      var delay, error, execute, options, result,
        _this = this;
      result = '';
      error = null;
      options = ['--stdin', '--load-path', this.config.paths.root, '--load-path', sysPath.dirname(path), '--no-cache'];
      if (!this.config.minify) {
        options.push('--debug-info');
      }
      if (/\.scss$/.test(path)) {
        options.push('--scss');
      }
      execute = function() {
        var onExit, sass;
        if (_this.compass) {
          options.push('--compass');
        }
        sass = spawn(_this._bin, options);
        sass.stdout.on('data', function(buffer) {
          return result += buffer.toString();
        });
        sass.stderr.on('data', function(buffer) {
          if (error == null) {
            error = '';
          }
          return error += buffer.toString();
        });
        onExit = function(code) {
          return callback(error, result);
        };
        if (process.version.slice(0, 4) === 'v0.6') {
          sass.on('exit', onExit);
        } else {
          sass.on('close', onExit);
        }
        return sass.stdin.end(data);
      };
      delay = function() {
        if (_this.compass != null) {
          return execute();
        } else {
          return setTimeout(delay, 100);
        }
      };
      return delay();
    };

    SassCompiler.prototype.getDependencies = function(data, path, callback) {
      var dependencies, parent,
        _this = this;
      parent = sysPath.dirname(path);
      dependencies = data.split('\n').map(function(line) {
        return line.match(_this._dependencyRegExp);
      }).filter(function(match) {
        return (match != null ? match.length : void 0) > 0;
      }).map(function(match) {
        return match[1];
      }).filter(function(path) {
        return !!path && path !== 'compass';
      }).map(function(path) {
        if (sysPath.extname(path) !== ("." + _this.extension)) {
          return path + ("." + _this.extension);
        } else {
          return path;
        }
      }).map(function(path) {
        if (path.charAt(0) === '/') {
          return sysPath.join(_this.config.paths.root, path.slice(1));
        } else {
          return sysPath.join(parent, path);
        }
      });
      return process.nextTick(function() {
        return callback(null, dependencies);
      });
    };

    return SassCompiler;

  })();

}).call(this);
