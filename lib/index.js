// Generated by CoffeeScript 1.6.3
var SassCompiler, exec, spawn, sysPath, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

sysPath = require('path');

module.exports = SassCompiler = (function() {
  SassCompiler.prototype.brunchPlugin = true;

  SassCompiler.prototype.type = 'stylesheet';

  SassCompiler.prototype.extension = 'scss';

  SassCompiler.prototype.pattern = /\.s[ac]ss$/;

  SassCompiler.prototype._dependencyRegExp = /^ *@import ['"](.*)['"]/;

  SassCompiler.prototype._bin = process.platform === 'win32' ? 'sass.bat' : 'sass';

  SassCompiler.prototype._compass_bin = 'compass';

  function SassCompiler(config) {
    var k, v, _ref1, _ref2,
      _this = this;
    this.config = config;
    this.getDependencies = __bind(this.getDependencies, this);
    this.gem_home = (_ref1 = this.config.plugins) != null ? (_ref2 = _ref1.sass) != null ? _ref2.gem_home : void 0 : void 0;
    this.env = ((function() {
      var _ref3, _results;
      _ref3 = process.env;
      _results = [];
      for (k in _ref3) {
        v = _ref3[k];
        _results.push([k, v]);
      }
      return _results;
    })()).reduce(function(a, _arg) {
      var k, v;
      if (a == null) {
        a = {};
      }
      k = _arg[0], v = _arg[1];
      a[k] = v;
      return a;
    });
    if (this.gem_home) {
      this.env['GEM_HOME'] = config.plugins.sass.gem_home;
      this._bin = this.config.plugins.sass.gem_home + '/bin/sass';
      this._compass_bin = this.config.plugins.sass.gem_home + '/bin/compass';
    }
    exec("" + this._bin + " --version", {
      env: this.env
    }, function(error, stdout, stderr) {
      if (error) {
        console.error("You need to have Sass on your system");
        return console.error("Execute `gem install sass`");
      }
    });
    exec("" + this._compass_bin + " --version", {
      env: this.env
    }, function(error, stdout, stderr) {
      return _this.compass = !error;
    });
  }

  SassCompiler.prototype.compile = function(data, path, callback) {
    var delay, error, execute, hasComments, options, result, _ref1, _ref2,
      _this = this;
    result = '';
    error = null;
    options = ['--stdin', '--load-path', this.config.paths.root, '--load-path', sysPath.dirname(path), '--no-cache'];
    if (!this.config.optimize) {
      hasComments = ((_ref1 = this.config.plugins) != null ? (_ref2 = _ref1.sass) != null ? _ref2.debug : void 0 : void 0) === 'comments';
      options.push((hasComments ? '--line-comments' : '--debug-info'));
    }
    if (/\.scss$/.test(path)) {
      options.push('--scss');
    }
    execute = function() {
      var onExit, sass;
      if (_this.compass) {
        options.push('--compass');
      }
      sass = spawn(_this._bin, options, {
        env: _this.env
      });
      sass.stdout.on('data', function(buffer) {
        return result += buffer.toString();
      });
      sass.stderr.on('data', function(buffer) {
        if (error == null) {
          error = '';
        }
        return error += buffer.toString();
      });
      onExit = function(code) {
        return callback(error, result);
      };
      if (process.version.slice(0, 4) === 'v0.6') {
        sass.on('exit', onExit);
      } else {
        sass.on('close', onExit);
      }
      return sass.stdin.end(data);
    };
    delay = function() {
      if (_this.compass != null) {
        return execute();
      } else {
        return setTimeout(delay, 100);
      }
    };
    return delay();
  };

  SassCompiler.prototype.getDependencies = function(data, path, callback) {
    var dependencies, deps, parent,
      _this = this;
    parent = sysPath.dirname(path);
    dependencies = data.split('\n').map(function(line) {
      return line.match(_this._dependencyRegExp);
    }).filter(function(match) {
      return (match != null ? match.length : void 0) > 0;
    }).map(function(match) {
      return match[1];
    }).filter(function(path) {
      return !!path && !/^compass/.test(path);
    }).map(function(path) {
      if (sysPath.extname(path) !== ("." + _this.extension)) {
        return path + ("." + _this.extension);
      } else {
        return path;
      }
    }).map(function(path) {
      if (path.charAt(0) === '/') {
        return sysPath.join(_this.config.paths.root, path.slice(1));
      } else {
        return sysPath.join(parent, path);
      }
    });
    deps = [];
    dependencies.forEach(function(path) {
      var dir, file;
      dir = sysPath.dirname(path);
      file = sysPath.basename(path);
      deps.push(path);
      if (file[0] !== '_') {
        return deps.push(sysPath.join(dir, "_" + file));
      }
    });
    return process.nextTick(function() {
      return callback(null, deps);
    });
  };

  return SassCompiler;

})();
